---
- name: NAS - Additional CIFS - Ensure CIFS packages.
  ansible.builtin.package:
    name:
      - cifs-utils
      - samba-client
      - samba-common
    state: "{{ nas_client_package_state }}"

- name: NAS - Additional CIFS - Ensure additional CIFS paths exist if defined
  ansible.builtin.file:
    path: "{{ mount_path.local_mount_path }}"
    state: directory
  with_items:
    - "{{ nas_client_remote_additional_paths }}"
  loop_control:
    loop_var: mount_path
  when:
    - nas_client_remote_additional_paths is defined
    - item.type == "cifs"
  register: cifs_additional_paths

- name: NAS - Additional CIFS - Ensure additional CIFS credential files if defined
  ansible.builtin.template:
    dest: "{{ hms_docker_data_path }}/.{{ project_name }}.{{ cifs_creds.name | map('regex_replace', regex, replace) | list | join }}.cifs_creds"
    src: cifs_creds.j2
    owner: root
    group: root
    mode: 0600
  with_items:
    - "{{ nas_client_remote_additional_paths }}"
  loop_control:
    loop_var: cifs_creds
  when:
    - nas_client_remote_additional_paths is defined
    - cifs_creds.type == "cifs"
  vars:
    username: "{{ cifs_creds.cifs_username }}"
    password: "{{ cifs_creds.cifs_password }}"
  register: cifs_additional_creds

- name: NAS - Additional CIFS - Ensure additional CIFS fstab entries if defined
  ansible.builtin.mount:
    backup: yes
    boot: "{{ nas_client_mount_on_boot }}"
    path: "{{ cifs_mount[0].path }}"
    src: "{{ cifs_mount[0].mount_path.remote_path }}"
    fstype: cifs
    opts: credentials={{ cifs_mount[1].dest }},{{ cifs_mount[0].mount_path.cifs_opts }}
    state: "{{ nas_client_mount_state }}"
  with_nested:
    - "{{ cifs_additional_paths.results }}"
    - "{{ cifs_additional_creds.results }}"
  loop_control:
    loop_var: cifs_mount
  when:
    - cifs_additional_paths is defined
    - cifs_mount[1].dest is defined
    - cifs_mount[0].mount_path.type == "cifs"
    - not ansible_check_mode

- name: NAS - Additional CIFS - Ensure library folders for additional paths
  ansible.builtin.file:
    path: "{{ cifs_library_folder[0].path }}/{{ hms_docker_library_folder_name }}/{{ cifs_library_folder[1].folder_name }}"
    state: directory
  with_nested:
    - "{{ cifs_additional_paths.results }}"
    - "{{ hms_docker_library_folders }}"
  loop_control:
    loop_var: cifs_library_folder
  when:
    - cifs_additional_paths is defined
    - cifs_library_folder[0].mount_path.type == "cifs"
    - not ansible_check_mode
