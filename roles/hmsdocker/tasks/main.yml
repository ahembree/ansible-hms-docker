---
- name: Run versioning checks
  ansible.builtin.import_tasks: "versioning.yml"

# All these facts do is process data from the container map to reduce text output during playbook runs
- name: Build facts of enabled containers to slim play output
  ansible.builtin.set_fact:
    enabled_containers: >-
          {{
            hms_docker_container_map | dict2items | 
            selectattr('value.enabled', 'defined') |
            selectattr('value.enabled', 'equalto', true) |
            map(attribute='key') |
            list
          }}
    enabled_containers_config_dirs: >-
          {{
            hms_docker_container_map | dict2items | 
            selectattr('value.enabled', 'defined') |
            selectattr('value.enabled', 'equalto', true) |
            selectattr('value.directory', 'defined') |
            selectattr('value.directory', 'equalto', true) |
            map(attribute='key') |
            list
          }}
    traefik_enabled_subdomains: >-
          {{
            hms_docker_container_map | dict2items | 
            selectattr('value.enabled', 'defined') |
            selectattr('value.enabled', 'equalto', true) |
            selectattr('value.traefik', 'defined') |
            selectattr('value.traefik', 'equalto', true) |
            map(attribute='value.proxy_host_rule') |
            list
          }}
    traefik_enabled_external_hosts: >-
          {{
            traefik_ext_hosts_list | json_query('[?enabled==true].subdomain_name')
          }}
    # This is what ChatGPT said would be best and it accomplishes what I want. It's ugly I know
    authentik_proxy_enabled_containers: >
          [
          {% for item in hms_docker_container_map | dict2items
              if item.value.enabled is defined and item.value.enabled == true
              and item.value.traefik is defined and item.value.traefik == true
              and item.value.authentik is defined and item.value.authentik == true
              and item.value.proxy_host_rule is defined %}
            {
              "name": "{{ item.key }}",
              "proxy_host_rule": "{{ item.value.proxy_host_rule }}"
            }{% if not loop.last %},{% endif %}
          {% endfor %}
          ]

- name: Get list of container task files in the role
  ansible.builtin.set_fact:
    container_prereq_task_files: "{{ lookup('fileglob', role_path + '/tasks/container_prereqs/*.yml', wantlist=True) }}"
    container_postreq_task_files: "{{ lookup('fileglob', role_path + '/tasks/container_postreqs/*.yml', wantlist=True) }}"

- name: Get names of available container tasks
  ansible.builtin.set_fact:
    container_prereq_task_names: >-
      {{ container_prereq_task_files
        | map('basename')
        | map('regex_replace', '\.yml$', '')
        | list }}
    container_postreq_task_names: >-
      {{ container_postreq_task_files
        | map('basename')
        | map('regex_replace', '\.yml$', '')
        | list }}

- name: Slim variables
  ansible.builtin.set_fact:
    container_prereqs: "{{ enabled_containers | intersect(container_prereq_task_names) }}"
    container_postreqs: "{{ enabled_containers | intersect(container_postreq_task_names) }}"

- name: Extend enabled_containers list if flaresolverr enabled
  ansible.builtin.set_fact:
    enabled_containers: "{{ enabled_containers + ['flaresolverr'] }}"
  when: flaresolverr_enabled | default(false) or hms_docker_container_map['flaresolverr']['enabled'] | default(false)

- name: Ensure data, apps, and mount paths exists locally.
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ hms_docker_data_path }}"
    - "{{ hms_docker_apps_path }}"
    - "{{ hms_docker_mount_path }}"
  when: item is defined and item != ''

- name: NAS base configuration tasks.
  ansible.builtin.include_tasks: "nas/nas_{{ hms_docker_media_share_type | lower }}.yml"

- name: Ensure additional NAS configuration
  ansible.builtin.include_tasks: "nas/nas_additional_{{ item.type | lower }}.yml"
  with_items: "{{ nas_client_remote_additional_paths }}"
  when:
    - nas_client_remote_additional_paths is defined
    - nas_client_use_additional_paths is defined and nas_client_use_additional_paths
  no_log: "{{ not debug_mode }}"

- name: Ensure library folders.
  ansible.builtin.file:
    path: "{{ hmsdocker_library_path }}/{{ item.folder_name }}"
    state: directory
  with_items: "{{ hms_docker_library_folders }}"

- name: Ensure container config directories exist if not already
  ansible.builtin.file:
    path: "{{ hms_docker_apps_path }}/{{ item }}/config"
    state: directory
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
    mode: 0755
  loop: "{{ enabled_containers_config_dirs }}"

- name: Ensure separate 4K container config directories exist if enabled
  ansible.builtin.file:
    path: "{{ hms_docker_apps_path }}/{{ item }}-4k/config"
    state: directory
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
    mode: 0755
  loop:
    - sonarr
    - radarr
  when: 
    - separate_4k_instances_enable | default(false)

- name: Ensure Authentik
  ansible.builtin.import_tasks: "container_prereqs/authentik.yml"
  when: hmsdocker_authentik_enabled_globally

- name: Run container prereqs if available
  ansible.builtin.include_tasks: "container_prereqs/{{ container_task_name }}.yml"
  loop: '{{ container_prereqs }}'
  loop_control:
    loop_var: container_task_name

- name: Run VPN initialization tasks
  ansible.builtin.import_tasks: "vpn_setup.yml"

- name: Run Youtube downloader initialization tasks
  ansible.builtin.import_tasks: "youtube_downloaders.yml"
  
- name: Retrieve app API keys if available
  ansible.builtin.import_tasks: "app_api_key_reader.yml"
  when: hmsdocker_container_enabled_homepage

- name: Ensure env
  ansible.builtin.template:
    src: env.j2
    dest: "{{ hms_docker_data_path }}/.env"
    mode: "{{ secrets_env_mode }}"
    owner: "{{ secrets_env_user }}"
    group: "{{ secrets_env_group }}"
    backup: yes
    lstrip_blocks: yes
    trim_blocks: yes
  no_log: "{{ not debug_mode }}"
  register: compose_env
  vars:
    authentik_key: "{{ (slurped_key_data['content'] | b64decode) if slurped_key_data['content'] is defined else '### Will be obtained during full run ###' }}"
    authentik_pgpass: "{{ (slurped_pg_pass_data['content'] | b64decode) if slurped_pg_pass_data['content'] is defined else '### Will be obtained during full run ###' }}"
    authentik_pgu: "{{ authentik_old_pg_user if authentik_old_pg_user is defined and authentik_old_pg_user != '' else authentik_pg_user }}"
    authentik_pgdb: "{{ authentik_old_pg_db if authentik_old_pg_db is defined and authentik_old_pg_db != '' else authentik_pg_db }}"
    watchtower_key: "{{ (slurped_watchtower_key_data['content'] | b64decode) if slurped_watchtower_key_data['content'] is defined else '### Will be obtained during full run ###' }}"
    sonarr_key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    sonarr_4k_key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    radarr_key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    radarr_4k_key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    prowlarr_key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    bazarr_key: "{{ slurped_api_key_bazarr['content'] | b64decode | from_yaml }}"
    overseerr_key: "{{ slurped_api_key_overseerr['content'] | b64decode | from_json }}"
    tautulli_key: "{{ slurped_api_key_tautulli['content'] | b64decode | regex_search('(?<=api_key = )\\w*') | default('') }}"
    plex_key: "{{ slurped_api_key_plex['content'] | b64decode | regex_search('(?<=PlexOnlineToken=\")(.*?)(?=\")') | default('') }}"
    sabnzbd_key: "{{ slurped_api_key_sabnzbd['content'] | b64decode | regex_search('(?<=api_key = )\\w*') | default('') }}"
    readarr_key: "{{ slurped_api_key_readarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    lidarr_key: "{{ slurped_api_key_lidarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"

- name: Ensure compose_files directory exists
  ansible.builtin.file:
    dest: "{{ hms_docker_data_path }}/compose_files"
    state: directory
    mode: 0755
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
  register: compose_dir

- name: Ensure App Compose Files that are not in map
  ansible.builtin.import_tasks: "generate_compose_files.yml"

- name: Generate Docker Compose files for enabled containers 
  ansible.builtin.template:
    src: containers/{{ item }}.yml.j2
    dest: "{{ compose_dir.dest | default(hms_docker_data_path + '/compose_files') }}/{{ item }}.yml"
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
    mode: 0644
    trim_blocks: yes
    lstrip_blocks: yes
  loop: "{{ enabled_containers }}"
  when: item != 'authentik'
  register: compose_files_created

- name: Ensure main docker-compose.yml file.
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ hms_docker_data_path }}/docker-compose.yml"
    group: docker
    mode: 0644
    backup: yes
    lstrip_blocks: yes
    trim_blocks: yes

- name: Ensure containers defined in compose file.
  community.docker.docker_compose_v2:
    project_src: "{{ hms_docker_data_path }}"
    project_name: "{{ project_name }}"
    state: "{{ hms_docker_compose_container_state }}"
    remove_orphans: "{{ container_remove_orphans }}"
    # env_file: "{{ compose_env.dest }}" # Commented out since this module defaults to using the .env file within the project_src location, but leaving just in case advanced users wish to point to a different location
  when:
    - not ansible_check_mode

- name: Run container postreqs if available
  ansible.builtin.include_tasks: "tasks/container_postreqs/{{ container_task_name }}.yml"
  loop: '{{ container_postreqs }}'
  loop_control:
    loop_var: container_task_name

- name: Ensure custom scripts
  ansible.builtin.import_tasks: "scripts.yml"
  when: custom_scripts_enabled | default(false)

- name: Ensure VPN connection
  ansible.builtin.import_tasks: "vpn_validation.yml"
  when:
    - hmsdocker_container_enabled_transmission or hmsdocker_container_enabled_qbittorrent or hmsdocker_container_enabled_deluge
    - not ansible_check_mode
    - not is_github_runner | default(false)
