version: '3'
services:
{% if container_enabled_portainer %}
  # Portainer container, webgui for docker
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "traefik_net"
    {% if expose_ports_enabled_portainer %}
    ports:
      - 9000:9000
    {% endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ hms_docker_apps_path }}/portainer/config:/data
    {% if traefik_enabled_portainer %}
    labels:
      - traefik.enable=true
      - traefik.http.services.portainer-{{ project_name }}.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['portainer']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_portainer %}
      - traefik.http.routers.portainer-{{ project_name }}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_portainer %}
      - traefik.http.routers.portainer-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-portainer-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enable_auto_updates %}
  # Watchtower container, automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "traefik_net"
    command: --cleanup --schedule "{{ container_auto_update_schedule }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
{% endif %}

{% if container_enabled_traefik %}
  # Traefik container, loadbalancer/reverse proxy/ssl
  traefik:
    image: traefik:v2.6.1
    container_name: traefik
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    environment:
      - TZ={{ container_timezone }}
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
    {% if traefik_ssl_dns_provider_environment_vars %}
        {% for key, value in traefik_ssl_dns_provider_environment_vars.items() %}
      - {{ key }}={{ value }}
        {% endfor %}
    {% endif %}
    networks:
      - "traefik_net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ hms_docker_apps_path }}/traefik/config/traefik.yml:/etc/traefik/traefik.yml
      - {{ hms_docker_apps_path }}/traefik/config/certs/:/certs/
    {% if traefik_enabled_traefik %}
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['traefik']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
      - traefik.http.services.traefik-{{ project_name }}.loadbalancer.server.port=8080
      - "traefik.http.middlewares.internal-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, {{ traefik_subnet_allow_list }}"
      - "traefik.http.middlewares.external-ipwhitelist.ipwhitelist.sourcerange=0.0.0.0/0"
      - "traefik.http.routers.traefik-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% if authentik_enabled_traefik %}
      - traefik.http.routers.traefik-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-traefik-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if authentik_enabled_globally %}
  # Authentik container, authentication/authorization
  authentik-postgresql:
    container_name: authentik-postgresql
    image: postgres:12-alpine
    restart: {{ container_restart_policy }}
    networks:
      - authentik_net
    logging:
      driver: json-file
      options:
        max-size: 10m
    healthcheck:
      test: ["CMD", "pg_isready"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik_database:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
      - POSTGRES_USER=${PG_USER:-authentik}
      - POSTGRES_DB=${PG_DB:-authentik}
    
  authentik-redis:
    container_name: authentik-redis
    image: redis:alpine
    restart: {{ container_restart_policy }}
    networks:
      - authentik_net
    logging:
      driver: json-file
      options:
        max-size: 10m
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  authentik-server:
    container_name: authentik-server
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.6.2}
    restart: {{ container_restart_policy }}
    networks:
      - authentik_net
      - traefik_net
    logging:
      driver: json-file
      options:
        max-size: 10m
    command: server
    env_file:
      - .env
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
      # WORKERS: 2
    volumes:
      - {{ hms_docker_apps_path }}/authentik/media:/media
      - {{ hms_docker_apps_path }}/authentik/custom-templates:/templates
      - authentik_geoip:/geoip
    {% if expose_ports_enabled_authentik %}
    ports:
      - "0.0.0.0:${AUTHENTIK_PORT_HTTP:-9001}:9000"
      - "0.0.0.0:${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    {% endif %}
    {% if traefik_enabled_authentik %}
    labels:
      - traefik.enable=true
      - traefik.http.services.authentik-server-{{ project_name }}.loadbalancer.server.port=9000
      - traefik.http.routers.authentik-server-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['authentik']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_authentik %}
      - "traefik.http.routers.authentik-server-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_authentik %}
      - traefik.http.routers.authentik-server-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-authentik-server-router@docker
        {% endif %}
    {% endif %}

  authentik-worker:
    container_name: authentik-worker
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.6.2}
    restart: {{ container_restart_policy }}
    networks:
      - authentik_net
    command: worker
    env_file:
      - .env
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
    # This is optional, and can be removed. If you remove this, the following will happen
    # - The permissions for the /media folders aren't fixed, so make sure they are 1000:1000
    # - The docker socket can't be accessed anymore
    user: root
    volumes:
      - {{ hms_docker_apps_path }}/authentik/media:/media
      - {{ hms_docker_apps_path }}/authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ hms_docker_apps_path }}/authentik/custom-templates:/templates
      - authentik_geoip:/geoip

  authentik-geoipupdate:
    container_name: authentik-geoipupdate
    image: "maxmindinc/geoipupdate:latest"
    networks:
      - authentik_net
    volumes:
      - "authentik_geoip:/usr/share/GeoIP"
    env_file:
      - .env
    environment:
      GEOIPUPDATE_EDITION_IDS: "GeoLite2-City"
      GEOIPUPDATE_FREQUENCY: "8"
{% endif %}

{% if container_enabled_nzbget %}
  # NZBGet container
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "traefik_net"
      - "download_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    volumes:
      - {{ hms_docker_apps_path }}/nzbget/config:/config
    {% if nzbget_enable_downloads_mount %}
      - {{ hms_docker_apps_path }}/nzbget/downloads:/data/usenet
    {% endif %}
    {% if expose_ports_enabled_nzbget %}
    ports:
      - 6789:6789
    {% endif %}
    {% if traefik_enabled_nzbget %}
    labels:
      - traefik.enable=true
      - traefik.http.services.nzbget-{{ project_name }}.loadbalancer.server.port=6789
      - traefik.http.routers.nzbget-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['nzbget']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if expose_public_enabled_nzbget %}
      - "traefik.http.routers.nzbget-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_nzbget %}
      - traefik.http.routers.nzbget-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-nzbget-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_transmission %}
  # Transmission container, torrent client/VPN
  transmission:
    image: haugene/transmission-openvpn:latest
    container_name: transmission
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
    cap_add:
      - NET_ADMIN
    {% if expose_ports_enabled_transmission %}
    ports:
      - 9091:9091
      - 8888:8888
    {% endif %}
    dns:
      - '{{ transmission_dns_1 }}'
      - '{{ transmission_dns_2 }}'
    volumes:
      - {{ hms_docker_apps_path }}/transmission/config:/data/transmission-home
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - {{ hms_docker_apps_path }}/transmission/torrents:/data/torrents
    {% endif %}
    environment:
      - OPENVPN_PROVIDER={{ transmission_vpn_provider }}
      - OPENVPN_USERNAME={{ transmission_vpn_user  }}
      - OPENVPN_PASSWORD={{ transmission_vpn_pass }}
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - TRANSMISSION_WEB_UI=transmission-web-control
      - TRANSMISSION_DOWNLOAD_DIR=/data/torrents
      - TRANSMISSION_INCOMPLETE_DIR=/data/torrents/incomplete
      - TRANSMISSION_INCOMPLETE_DIR_ENABLED=true
      - TRANSMISSION_WATCH_DIR_ENABLED=false
      - TZ={{ container_timezone }}
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - WEBPROXY_ENABLED=true
      - WEBPROXY_PORT=8888
      - HEALTH_CHECK_HOST=google.com
      - TRANSMISSION_RATIO_LIMIT={{ transmission_ratio_limit }}
      - TRANSMISSION_RATIO_LIMIT_ENABLED={{ transmission_ratio_enabled }}
      - LOCAL_NETWORK={{ hms_docker_network_subnet }}
    {% for key, value in transmission_additional_env_vars.items() %}
      - {{ key }}={{ value }}
    {% endfor %}

  # Proxy container, for Transmission, also hosts HTTP proxy to route traffic through the VPN
  transmission-proxy:
    image: haugene/transmission-openvpn-proxy:latest
    container_name: transmission-proxy
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    depends_on:
      - transmission
    environment:
      - TZ={{ container_timezone }}
    {% if expose_ports_enabled_transmission %}
    ports:
      - 8081:8080
    {% endif %}
    {% if traefik_enabled_transmission %}
    labels:
      - traefik.enable=true
      - traefik.http.routers.proxy-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['transmission']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
      - traefik.http.services.proxy-{{ project_name }}.loadbalancer.server.port=8080
        {% if not expose_public_enabled_transmission %}
      - "traefik.http.routers.proxy-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_transmission %}
      - traefik.http.routers.transmission-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-transmission-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_requestrr %}
  # Requestrr container, chat client for requests
  requestrr:
    image: darkalfx/requestrr:latest
    container_name: requestrr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    volumes:
      - {{ hms_docker_apps_path }}/requestrr/config:/root/config
    {% if expose_ports_enabled_requestrr %}
    ports:
      - 4545:4545
    {% endif %}
    {% if traefik_enabled_requestrr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.requestrr-{{ project_name }}.loadbalancer.server.port=4545
      - traefik.http.routers.requestrr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['requestrr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_requestrr %}
      - "traefik.http.routers.requestrr-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_requestrr %}
      - traefik.http.routers.requestrr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-requestrr-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_prowlarr %}
  # Prowlarr container, torrent indexer
  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    volumes:
      - {{ hms_docker_apps_path }}/prowlarr/config:/config
    {% if expose_ports_enabled_prowlarr %}
    ports:
      - 9696:9696
    {% endif %}
    {% if traefik_enabled_prowlarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.prowlarr-{{ project_name }}.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['prowlarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_prowlarr %}
      - "traefik.http.routers.prowlarr-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_prowlarr %}
      - traefik.http.routers.prowlarr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-prowlarr-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_sonarr %}
  # Sonarr container, tv show indexer
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_sonarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.sonarr-{{ project_name }}.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_sonarr %}
      - "traefik.http.routers.sonarr-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_sonarr %}
      - traefik.http.routers.sonarr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-sonarr-router@docker
        {% endif %}
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/sonarr/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - {{ hms_docker_apps_path }}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_sonarr %}
    ports:
      - 8989:8989
    {% endif %}
{% endif %}

{% if container_enabled_sonarr and separate_4k_instances_enable is defined and separate_4k_instances_enable %}
  # Sonarr container, tv show indexer
  sonarr-{{ separate_4k_instances_suffix }}:
    image: linuxserver/sonarr:latest
    container_name: sonarr-{{ separate_4k_instances_suffix }}
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_sonarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.sonarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_sonarr %}
      - "traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_sonarr %}
      - traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-sonarr-{{ separate_4k_instances_suffix }}-router@docker
        {% endif %}
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/sonarr-{{ separate_4k_instances_suffix }}/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - {{ hms_docker_apps_path }}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_sonarr %}
    ports:
      - 8990:8989
    {% endif %}
{% endif %}

{% if container_enabled_radarr %}
  # Radarr container, movie indexer
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_radarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.radarr-{{ project_name }}.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_radarr %}
      - "traefik.http.routers.radarr-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_radarr %}
      - traefik.http.routers.radarr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-radarr-router@docker
        {% endif %}
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/radarr/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - {{ hms_docker_apps_path }}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_radarr %}
    ports:
      - 7878:7878
    {% endif %}
{% endif %}

{% if container_enabled_radarr and separate_4k_instances_enable is defined and separate_4k_instances_enable %}
  # Radarr container, movie indexer
  radarr-{{ separate_4k_instances_suffix }}:
    image: linuxserver/radarr:latest
    container_name: radarr-{{ separate_4k_instances_suffix }}
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_radarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.radarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_radarr %}
      - "traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_radarr %}
      - traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-radarr-{{ separate_4k_instances_suffix }}-router@docker
        {% endif %}
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/radarr-{{ separate_4k_instances_suffix }}/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - {{ hms_docker_apps_path }}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_radarr %}
    ports:
      - 7879:7878
    {% endif %}
{% endif %}

{% if container_enabled_bazarr %}
  # Bazarr container, subtitle indexer
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "traefik_net"
    {% if expose_ports_enabled_bazarr %}
    ports:
      - 6767:6767
    {% endif %}
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    volumes:
      - {{ hms_docker_apps_path }}/bazarr/config:/config
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if traefik_enabled_bazarr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.bazarr-{{ project_name }}.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['bazarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_bazarr %}
      - "traefik.http.routers.bazarr-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_bazarr %}
      - traefik.http.routers.bazarr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-bazarr-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_overseerr %}
  # Overseer container, request platform
  overseerr:
    image: linuxserver/overseerr:latest
    container_name: overseerr
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "media_net"
      - "download_net"
      - "traefik_net"
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_overseerr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.overseerr-{{ project_name }}.loadbalancer.server.port=5055
      - traefik.http.routers.overseerr-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['overseerr']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
      - "traefik.http.routers.overseerr-{{ project_name }}.middlewares=external-ipwhitelist"
        {% if authentik_enabled_overseerr %}
      - traefik.http.routers.overseerr-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-overseerr-router@docker
        {% endif %}
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/overseerr/config:/config
    {% if expose_ports_enabled_overseerr %}
    ports:
      - 5055:5055
    {% endif %}
{% endif %}

{% if container_enabled_plex %}
  # Plex container, media server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: {{ container_restart_policy }}
    {% if enable_intel_gpu %}
    devices:
      - /dev/dri:/dev/dri
    {% endif %}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "media_net"
      - "traefik_net"
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    environment:
      - VERSION=docker
      - TZ={{ container_timezone }}
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - PLEX_CLAIM={{ plex_claim_token }}
      - ADVERTISE_IP={{ plex_advertise_ip }}:32400
      - ALLOWED_NETWORKS={{ hms_docker_network_subnet }}
    {% if enable_nvidia_gpu %}
      - NVIDIA_VISIBLE_DEVICES=all
    runtime: nvidia
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/plex/config:/config
      # temp folder for Plex transcoding
      - {{ plex_transcode_folder }}:/transcode
      # media folder where all movies and series are stored
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if traefik_enabled_plex %}
    labels:
      - traefik.enable=true
      - traefik.http.services.plex-{{ project_name }}.loadbalancer.server.port=32400
      - traefik.http.routers.plex-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['plex']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_plex %}
      - "traefik.http.routers.plex-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_plex %}
      - traefik.http.routers.plex-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-plex-router@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_tautulli %}
  # Tautulli container, analytics
  tautulli:
    image: tautulli/tautulli:latest
    container_name: tautulli
    restart: {{ container_restart_policy }}
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - "media_net"
      - "traefik_net"
    {% if authentik_enabled_tautulli %}
      - "authentik_net"
    {% endif %}
    environment:
      - PUID={{ container_uid }}
      - PGID={{ container_gid }}
      - TZ={{ container_timezone }}
    {% if traefik_enabled_tautulli %}
    labels:
      - traefik.enable=true
      - traefik.http.services.tautulli-{{ project_name }}.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-{{ project_name }}.rule=Host(`{{ hms_docker_container_map['tautulli']['proxy_host_rule'] }}.{{ hms_docker_domain }}`)
        {% if not expose_public_enabled_tautulli %}
      - "traefik.http.routers.tautulli-{{ project_name }}.middlewares=internal-ipwhitelist"
        {% endif %}
        {% if authentik_enabled_tautulli %}
      - traefik.http.routers.tautulli-{{ project_name }}.middlewares=authentik-proxy-{{ project_name }}-tautulli-router@docker
        {% endif %}
    {% endif %}
    {% if expose_ports_enabled_tautulli %}
    ports:
      - 8181:8181
    {% endif %}
    volumes:
      - {{ hms_docker_apps_path }}/tautulli/config:/config
      # Plex logs location
      - {{ hms_docker_apps_path }}/plex/config/Library/Application Support/Plex Media Server/Logs:/plex_logs:ro
{% endif %}

{% if cloudflare_ddns_enabled %}
  # Cloudflare DDNS container
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: '{{ container_restart_policy }}'
    logging:
      driver: json-file
      options:
        max-size: 10m
    environment:
      - API_KEY={{ cloudflare_api_token }}
      - ZONE={{ cloudflare_ddns_domain }}
      - DELETE_ON_STOP={{ cloudflare_ddns_delete_record_on_stop }}
    {% if cloudflare_ddns_create_ipv6_aaaa_record %}
      - RRTYPE=AAAA
    {% endif %}
    {% if cloudflare_ddns_subdomain %}
      - SUBDOMAIN={{ cloudflare_ddns_subdomain }}
    {% endif %}
      - PROXIED={{ cloudflare_ddns_proxied }}
{% endif %}

networks:
  "download_net":
    driver: bridge
    attachable: false
  "media_net":
    driver: bridge
    attachable: false
  "traefik_net":
    driver: bridge
    attachable: true
{% if authentik_enabled_globally %}
  "authentik_net":
    driver: bridge
    attachable: false
{% endif %}

{% if authentik_enabled_globally %}
volumes:
  authentik_database:
    driver: local
  authentik_geoip:
    driver: local
{% endif %}
